# -*- coding: utf-8 -*-
"""House Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15WIiGT2qDZS45reASugjSQ9bAwlltsXj

Importing libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

"""Importing the Boston house price dataset"""

house_price_dataset = sklearn.datasets.load_boston()

print(house_price_dataset)

# Loading the dataset to a pandas dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data, columns = house_price_dataset.feature_names)

house_price_dataframe.head()

# add the target(price) column to the dataframe
house_price_dataframe['price'] = house_price_dataset.target

house_price_dataframe.head()

house_price_dataframe.shape

house_price_dataframe.info()

# statictical measures of the data
house_price_dataframe.describe()

"""Understanding the correlation between various features in the dataset

"""

correlation = house_price_dataframe.corr()

"""1 # contructing a heatmap to understand the correlation"""

plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar = True, square = True, fmt = '.1f', annot = True, annot_kws={'size':8}, cmap = 'Blues')

"""Splitting the data and target

"""

X = house_price_dataframe.drop(['price'], axis = 1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""splitting the data into training and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training - XGBoost Regressor


"""

# loading the model
model = XGBRegressor()

# training the model with X-train and Y_train
model.fit(X_train, Y_train)

"""Evaluation

Prediction on training data
"""

# accuracy for prediction on training data
training_data_prediction = model.predict(X_train)

print(training_data_prediction)

# R squared error
score_1 = metrics.r2_score(Y_train, training_data_prediction)

# Mean Absolute error
score_2 = metrics.mean_absolute_error(Y_train, training_data_prediction)

print("R squared error: ", score_1)
print("Mean absolute error: ", score_2)

"""Visualizing the actual prices and predicted prices"""

plt.scatter(Y_train, training_data_prediction)
plt.xlabel("Actul Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""Prediction on test data

"""

# accuracy for prediction on test data
test_data_prediction = model.predict(X_test)

# R squared error
score_1 = metrics.r2_score(Y_test, test_data_prediction)

# Mean Absolute error
score_2 = metrics.mean_absolute_error(Y_test, test_data_prediction)

print("R squared error: ", score_1)
print("Mean absolute error: ", score_2)

"""Visualizing the actual prices and predicted prices for test data"""

plt.scatter(Y_test, test_data_prediction)
plt.xlabel("Actul Price")
plt.ylabel("Predicted Price")
plt.title("Actual Price vs Predicted Price")
plt.show()

"""-----------------------------------------------------END----------------------------------------------------"""